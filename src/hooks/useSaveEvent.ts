/**
 * Hook for saving events to the database
 * Extends the existing events table functionality
 */

import { useState, useCallback } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from './useAuth';
import { logger } from '@/lib/logger';
import toast from 'react-hot-toast';
import { generateCalendarLinks } from '@/utils/calendarGenerator';
import { createCalendarShortLinks } from '@/utils/shortLinks';
import type { EventData, CalendarLinks } from '@/types';

interface UsageData {
  events_created: number;
  user_id: string;
  month: string;
}

interface SaveEventReturn {
  saveEvent: (eventData: EventData) => Promise<{
    eventId: string;
    shortLinks: CalendarLinks;
  } | null>;
  loading: boolean;
  error: string | null;
}

export function useSaveEvent(): SaveEventReturn {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();
  const supabase = createClientComponentClient();

  const saveEvent = useCallback(async (eventData: EventData): Promise<{
    eventId: string;
    shortLinks: CalendarLinks;
  } | null> => {
    if (!user) {
      const errorMsg = 'You must be logged in to save events';
      setError(errorMsg);
      toast.error(errorMsg);
      return null;
    }

    if (!eventData.title?.trim()) {
      const errorMsg = 'Event title is required';
      setError(errorMsg);
      toast.error(errorMsg);
      return null;
    }

    try {
      setLoading(true);
      setError(null);

      logger.info('Saving event', 'EVENT_SAVE', { 
        userId: user.id, 
        title: eventData.title 
      });

      // Skip usage limits check for now - usage_tracking table doesn't exist
      // TODO: Implement usage tracking later when needed
      logger.info('Skipping usage limits check - table not configured', 'EVENT_SAVE', {
        userId: user.id
      });

      // Save event to existing events table - only include fields that exist in DB
      const eventToSave = {
        title: eventData.title,
        description: eventData.description,
        location: eventData.location,
        organizer: eventData.organizer,
        start_date: eventData.startDate,
        start_time: eventData.startTime,
        end_date: eventData.endDate || eventData.startDate, // Use startDate as fallback if endDate not provided
        end_time: eventData.endTime,
        timezone: eventData.timezone,
        is_all_day: eventData.isAllDay || false,
        user_id: user.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
        // share_id will be auto-generated by the database
      };

      const { data: savedEvent, error: saveError } = await supabase
        .from('events')
        .insert([eventToSave])
        .select()
        .single();

      if (saveError) {
        throw new Error(`Failed to save event: ${saveError.message}`);
      }

      // Skip usage tracking increment - RPC function doesn't exist
      // TODO: Implement usage tracking RPC function later
      logger.info('Skipping usage tracking increment - RPC not configured', 'EVENT_SAVE', {
        eventId: savedEvent.id
      });

      // Generate calendar links and then short links
      const calendarLinks = generateCalendarLinks(eventData);
      let shortLinks: CalendarLinks = {};
      
      try {
        shortLinks = await createCalendarShortLinks(
          calendarLinks,
          eventData.title,
          user.id
        );
        logger.info('Short links generated successfully', 'EVENT_SAVE', {
          eventId: savedEvent.id,
          shortLinksCount: Object.keys(shortLinks).length
        });
      } catch (shortLinkError) {
        logger.warn('Failed to generate short links, using original URLs', 'EVENT_SAVE', {
          eventId: savedEvent.id,
          error: shortLinkError instanceof Error ? shortLinkError.message : 'Unknown error'
        });
        shortLinks = calendarLinks; // Fallback to original links
      }

      logger.info('Event saved successfully', 'EVENT_SAVE', { 
        eventId: savedEvent.id, 
        userId: user.id,
        title: eventData.title,
        hasShortLinks: Object.keys(shortLinks).length > 0
      });

      toast.success(`"${eventData.title}" saved with calendar links!`);
      
      return {
        eventId: savedEvent.id,
        shortLinks
      };

    } catch (error) {
      console.error('Full save event error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to save event';
      logger.error('Save event error', 'EVENT_SAVE', { 
        userId: user?.id, 
        title: eventData.title,
        error: errorMessage,
        fullError: error
      });
      
      setError(errorMessage);
      toast.error(errorMessage);
      return null;

    } finally {
      setLoading(false);
    }
  }, [user, supabase]);

  return {
    saveEvent,
    loading,
    error
  };
}